<?xml version="1.0" encoding="utf-8" ?>
<!--
NOTE:  This is NO a complete .config file.  Only sections pertaining to Logging are included here
-->
<configuration>
  <configSections>
    <section name="nlog" type="NLog.Config.ConfigSectionHandler, NLog" />
  </configSections>
  <appSettings>

    <!-- 
    HashTag.Application.Name (optional. STRONGLY recommended to almost required)
    
    Defines the application log events should be associated with. (e.g. MyWebStore)
    This is important with application is behind load balancers or
    events can be emitted from shared library files.
    
    Value Resolution:
    
      If blank or not provided (not recommended):  attempt to build name from running assembly
      When provided:
        If 'value' exists as another key in .config use .config key['value'] as application value
        If 'value' does nto exist in another key or is empty, then use 'value'
        
     Legacy Integtration:
        Some applications already have an application identifier (e.g. appKey, applicationName, etc.) Place
        existing indentifier in 'value' of HashTag.Application.Name and 
        system will use that value instead.
        
    -->
    <add key="HashTag.Application.Name" value="LoggingDemo" />
    <!-- 
    HashTag.Application.Module (optional)
    
    Defines a sub-part of an application (e.g. for an account application 'Module' may be A/R)
    
    Leave blank to ignore
    
    Value Resolution:
    
      If blank or not provided (not recommended):  attempt to build name from running assembly
      When provided:
        If 'value' exists as another key in .config use .config key['value'] as application value
        If 'value' does nto exist in another key or is empty, then use 'value'
        
     Legacy Integtration:
        Some applications already have an application identifier (e.g. appKey, applicationName, etc.) Place
        existing indentifier in 'value' of HashTag.Application.Name and 
        system will use that value instead.
        
    -->
    <add key="HashTag.Application.Module" value="Console"/>
    
    <!--
    HashTag.Application.Environment (optional. STRONGLY recommended to almost required)
    
    Defines the environment (e.g. local, DEV, QA, PROD, STAGE, HOTFIX, DEMO) this code base is running in.
    
    Value Resolution:
    
      If blank or not provided (not recommended):  uses Host name of computer generating this message
      When provided:
        If 'value' exists as another key in .config use .config key['value'] as environment value
        If 'value' does nto exist in another key or is empty, then use 'value'
        
     Legacy Integtration:
        Some applications already have an environment identifier (e.g. env, environment, etc.) Place
        existing indentifier in 'value' of HashTag.Application.Environment and 
        system will use that value instead.
        
     DEPLOYMENT Notes/Suggestions:
        local workstation   local (or blank -puts log messages in central store associated with developer's workstation)
        development         DEV
        QA                  QA
        PROD                PROD
        
    -->
    <add key="HashTag.Application.Environment" value="local" />


    <!--
    HashTag.Logging.SourceLevels (optional. default: Information, ActivityTracing)
    
    Common separated list of severity of events to be passed to configured IEventStoreConnector (e.g. NLog, TraceSource)
    See: https://msdn.microsoft.com/en-us/library/system.diagnostics.sourcelevels(v=vs.110).aspx
    
    Off               - no messages passed to event store
    Critical          - unhandled error (possibly).  Usually triggers request for immediate attention
    Error             - an unexpected error occured (logical or execution).  System might be able to recover.  
                        System support might be notified
    Warning           - 
    Information       - information sender deems to be important but no action is needed
    Verbose           - debug/state type events (not recommended for normal production use)
    ActivityTracing   - Start/Stop/Transfer events (often used in processing type apps or session.start/ended messages)
    All               - all events passed to event store  
        
    RECOMMENDATION:  Use this value to control how much logging is generated and leave 
    log store filter to accept all events from event builder.
    
    DEPLOYMENT Notes/Suggestions:
      local workstation   All
      development         All
      QA                  Information, ActivityTracing
      PROD                Information (ActivityTracing for batch or timer-based applications)
    -->
    <!-- 
    DO NOT REMOVE THESE COMMENTS
    
    A comma delmited list of:
      Off, Critical, Error, Warning, Information, ActivityTracing, All
      
    Default:  Information, ActivityTracing
    -->
    <add key="HashTag.Logging.SourceLevels" value="Information,ActivityTracing"/>


    <!--
    HashTag.Logging.EventStoreType (optional. default: HashTag.Logging.Client.NLog.Extensions.NLogEventConnector, HashTag.Logging.Client)
    
    Sets the concrete implementaion of IEventLogger.
    
    NOTE:  Library has TraceSource connector for use in environments without 3rd party dependencies
    -->
    <add key="HashTag.Logging.EventStoreType" value="HashTag.Logging.Client.NLog.Extensions.NLogEventConnector, HashTag.Logging.Client"/>


    <!--
    HashTag.Application.Branding (optional. default: HashTag)
    
      Sets the prefix for configuration settings.  Used when enterprise
      wants to 'localize' settings for their own domain (e.g. MyStartup = MyStartup.Application.Environment)
      
      NOTE:  Once set all HashTag* configuration settings must must the
             branding prefix instead of default 'HashTag'
    
    -->
    <add key="HashTag.Application.Branding" value="HashTag"/>

    <!--
      NLog Configuration Settings::internalLogLevel (optional. Recommended)
      
      See: https://github.com/NLog/NLog/wiki/Internal-Logging
    -->
    <add key="internalLogLevel" value="Trace" />

    <!--
    NLog Configuration Settings::internalLogToConsole (optional. Recommended)
    
    Used for debugging NLog - especially during project bootstrapping phase
      
     DEPLOYMENT Notes/Suggestions:
      local workstation   true  
      development         true
      QA                  false
      PROD                false
      
    -->
    <add key="internalLogToConsole" value="true" />

  </appSettings>

  <!--
  NLog Configuration
  
  CONVENTION:
  
    Place this section at the end of the .config file
  
  See: https://github.com/NLog/NLog/wiki/Tutorial
  
  NOTE:  Usually control logging verbosity using the HashTag.Logging.SourceLevels entry and leave
         NLog levels to Trace (e.g. all messages); unless there's a specific use-case to override
         the defaults.
         
         Using the appSetting approach allows the NLog section to be generally ignored!
    
  NOTE:  IEventLogger is compatible with NLog so any NLog configuration can be used.  Below
         are suggested defaults but may be changed as desired

NLOG LOG LEVELS
    
    Fatal    - very serious errors!
    Error    - error messages - most of the time these are Exceptions
    Warn     - warning messages, typically for non-critical issues, which can be recovered or which are temporary failures
    Info     - information messages, which are normally enabled in production environment
    Debug    - debugging information, less detailed than trace, typically not enabled in production environment.    
    Trace    - very detailed logs, which may include high-volume information such as protocol payloads. This log level is typically only enabled during development
    
LEVEL MAPING

    LogClient::LogEvent   NLog::LogEventInfo
      Critical              Fatal
      Error                 Error
      Warn                  Warn
      Info                  Info
      Verbose               Trace
      Start                 Debug
      Stop                  Debug
  
    DEPLOYMENT Notes/Suggestions:  (Use appSetting::HashTag.Logging.SourceLevels to control logging unless app does not use IEventLogger Wrapper)
          local workstation   Trace  
          development         Trace
          QA                  Trace
          PROD                Trace

CONFIGURATION NOTES

  throwExceptions - throw an exception if a configuration error occurs. Helps detect deployment and transformation errors
    DEPLOYMENT Notes/Suggestions:  
         local workstation   true
         development         true
         QA                  true
         PROD                true
  
  extensionAssembly (see: https://github.com/NLog/NLog/wiki/Extending%20NLog)
      Set to assembly containing custom NLog custom targets (Default: HashTag.Logging.Client)
     
  rules: (see: https://github.com/nlog/NLog/wiki/Configuration-file#rules)
      (default: save all events with any severity to target; since they were filtered with IEventLogger)
  
    NOTE:  If you don't see expected output to log store, rules are the first place to verify
    NOTE:  You can define as many rules as are required
    
    writeTo - write to a comma separated list of targets when rule evaluates to True
    
  targets
    async=true (see: https://github.com/NLog/NLog/wiki/AsyncWrapper-target)
        Ensures writing to targets occur on a non-UI/primary thread
        For more asynchronous control, use an asynchronous wrapper target. (see referenced site)
        
  -->
  <nlog throwExceptions="true" xmlns="http://www.nlog-project.org/schemas/NLog.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <extensions>
      <add assembly="HashTag.Logging.Client" />
    </extensions>
    <rules>
      <logger name="*" minlevel="Trace" writeTo="defaultTargetList" />
    </rules>
    <targets async="true">
      <target xsi:type="FallbackGroup" name="defaultTragetList" returnToFirstOnSuccess="true">
        <target xsi:type="Debugger" name="T1" layout="${longdate}|${level}|${logger}|${message}" />
      </target>
      <target xsi:type="Splunk" name="t2" dropFolder="c:\splunkfiles" />
    </targets>
  </nlog>
</configuration>
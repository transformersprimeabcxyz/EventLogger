<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <sectionGroup name="elmah">
      <section name="security" requirePermission="false" type="Elmah.SecuritySectionHandler, Elmah" />
      <section name="errorLog" requirePermission="false" type="Elmah.ErrorLogSectionHandler, Elmah" />
      <section name="errorMail" requirePermission="false" type="Elmah.ErrorMailSectionHandler, Elmah" />
      <section name="errorFilter" requirePermission="false" type="Elmah.ErrorFilterSectionHandler, Elmah" />
    </sectionGroup>
    <section name="nlog" type="NLog.Config.ConfigSectionHandler, NLog" />
  </configSections>
  <appSettings>

    <add key="HashTag.Application.Name" value="LoggingDemo" />
    <add key="HashTag.Application.Environment" value="local" />

    <!--
    HashTag.Logging.SourceLevels (optional. default: Information)
    
    Common separated list of severity of events to be passed to configured IEventStoreConnector (e.g. NLog, TraceSource)
    See: https://msdn.microsoft.com/en-us/library/system.diagnostics.sourcelevels(v=vs.110).aspx
    
    Off               - no messages passed to event store
    Critical          - unhandled error (possibly).  Usually triggers request for immediate attention
    Error             - an unexpected error occured (logical or execution).  System might be able to recover.  
                        System support might be notified
    Warning           - 
    Information       - information sender deems to be important but no action is needed
    Verbose           - debug/state type events (not recommended for normal production use)
    ActivityTracing   - Start/Stop/Transfer events (often used in processing type apps or session.start/ended messages)
    All               - all events passed to event store  
        
    RECOMMENDATION:  Use this value to control how much logging is generated and leave 
    log store filter to accept all events from event builder.
    
    DEPLOYMENT Notes/Suggestions:
      local workstation   All
      development         All
      QA                  Information, ActivityTracing
      PROD                Information (ActivityTracing for processing applications)
    -->
    <add key="HashTag.Logging.SourceLevels" value="All"/>

    <!--
    HashTag.Logging.EventStoreType (default: HashTag.Logging.Client.NLog.Extensions.NLogEventConnector, HashTag.Logging.Client)
    
    Sets the concrete implementaion of IEventLogger.
    
    NOTE:  Library has TraceSource connector for use in environments without 3rd party dependencies
    -->
    <add key="HashTag.Logging.EventStoreType" value="HashTag.Logging.Client.NLog.Extensions.NLogEventConnector, HashTag.Logging.Client"/>

    <!--
    HashTag.Logging.HttpCaptureFlags (optional. default: All)
    
    Comma separated list of flags to auto-retrieve from current HTTP request when 
    and error or more severe event is encountered.
    
    NOTE: Non-HTTP apps (e.g. console, windows service, WinForms, test runners) will ignore HTTP Context and no error occures 
    so it is safe to specific these settings even on non-HTTP apps

        None            = Do not auto capture any HTTP
        Url             = Return Method and full URL GET http://mysite.com/admin.aspx?q1=12 ,
        Form            = Return all form fields and their values (HttpContext.Params collection),
        Session         = Return all session keys and the ToString() of their values,
        AppCache        = Return all application keys and the ToString() of their values,
        Items           = HttpContext.Items (usually for handler communication),
        Cookies         = HttpContext.Request.Cookies,
        QueryString     = HttpContext.Request.QueryString,
        ServerVariables = HttpContext.Request.ServerVariables,
        Headers         = HttpContext.Request.Header,
        All             = Capture all http request data
    -->
    <add key="HashTag.Logging.HttpCaptureFlags" value="All"/>

    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
    <add key="ClientValidationEnabled" value="true" />
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />

    <add key="elmah.mvc.disableHandler" value="false" />
    <add key="elmah.mvc.disableHandleErrorFilter" value="false" />
    <add key="elmah.mvc.requiresAuthentication" value="false" />
    <add key="elmah.mvc.IgnoreDefaultRoute" value="false" />
    <add key="elmah.mvc.allowedRoles" value="*" />
    <add key="elmah.mvc.allowedUsers" value="*" />
    <add key="elmah.mvc.route" value="elmah" />
    <add key="elmah.mvc.UserAuthCaseSensitive" value="true" />


    <!--
      NLog Configuration Settings::internalLogLevel (optional. Recommended)
      
      See: https://github.com/NLog/NLog/wiki/Internal-Logging
    -->
    <add key="internalLogLevel" value="Trace" />

    <!--
    NLog Configuration Settings::internalLogToConsole (optional. Recommended)
    
    Used for debugging NLog - especially during project bootstrapping phase
      
     DEPLOYMENT Notes/Suggestions:
      local workstation   true  
      development         true
      QA                  false
      PROD                false
      
    -->
    <add key="internalLogToConsole" value="true" />

  </appSettings>

  <!--
  NLog Configuration
  
  See: https://github.com/NLog/NLog/wiki/Tutorial
  
  NOTE:  Usually control logging verbosity using the HashTag.Logging.SourceLevels entry and leave
         NLog levels to Trace (e.g. all messages); unless there's a specific use-case to override
         the defaults.
         
         Using the appSetting approach allows the NLog section to be generally ignored!
    
  NOTE:  IEventLogger is compatible with NLog so any NLog configuration can be used.  Below
         are suggested defaults but may be changed as desired

NLOG LOG LEVELS
    
    Fatal    - very serious errors!
    Error    - error messages - most of the time these are Exceptions
    Warn     - warning messages, typically for non-critical issues, which can be recovered or which are temporary failures
    Info     - information messages, which are normally enabled in production environment
    Debug    - debugging information, less detailed than trace, typically not enabled in production environment.    
    Trace    - very detailed logs, which may include high-volume information such as protocol payloads. This log level is typically only enabled during development
    
LEVEL MAPING

    LogClient::LogEvent   NLog::LogEventInfo
      Critical              Fatal
      Error                 Error
      Warn                  Warn
      Info                  Info
      Verbose               Trace
      Start                 Debug
      Stop                  Debug
  
    DEPLOYMENT Notes/Suggestions:  (Use appSetting::HashTag.Logging.SourceLevels to control logging unless app does not use IEventLogger Wrapper)
          local workstation   Trace  
          development         Trace
          QA                  Trace
          PROD                Trace

CONFIGURATION NOTES

  throwExceptions - throw an exception if a configuration error occurs. Helps detect deployment and transformation errors
    DEPLOYMENT Notes/Suggestions:  
         local workstation   true
         development         true
         QA                  true
         PROD                true
  
  extensionAssembly (see: https://github.com/NLog/NLog/wiki/Extending%20NLog)
      Set to assembly containing custom NLog custom targets (Default: HashTag.Logging.Client)
     
  rules: (see: https://github.com/nlog/NLog/wiki/Configuration-file#rules)
      (default: save all events with any severity to target; since they were filtered with IEventLogger)
  
    NOTE:  If you don't see expected output to log store, rules are the first place to verify
    NOTE:  You can define as many rules as are required
    
    writeTo - write to a comma separated list of targets when rule evaluates to True
    
  targets
    async=true (see: https://github.com/NLog/NLog/wiki/AsyncWrapper-target)
        Ensures writing to targets occur on a non-UI/primary thread
        For more asynchronous control, use an asynchronous wrapper target. (see referenced site)
        
  -->
  <nlog throwExceptions="true" xmlns="http://www.nlog-project.org/schemas/NLog.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <extensions>
      <add assembly="HashTag.Logging.Client" />
    </extensions> 
    <rules>
      <logger name="*" minlevel="Trace" writeTo="defaultTargetList" />
    </rules>
    <targets async="true">
      <target xsi:type="FallbackGroup" name="defaultTragetList" returnToFirstOnSuccess="true">
        <target xsi:type="Debugger" name="T1" layout="${longdate}|${level}|${logger}|${message}" />
      </target>
      <target xsi:type="Splunk" name="t2" dropFolder="c:\splunkfiles" />
    </targets>
  </nlog>
  
  <!--
  Elmah Configuration
  
  
  -->
  <elmah>
    <security allowRemoteAccess="false" />
    <errorLog type="HashTag.Logging.Client.Elmah.ElmahErrorLog, HashTag.Logging.Client" />
  </elmah>
</configuration>